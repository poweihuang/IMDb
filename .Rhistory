setwd(~/Desktop)
setwd("~/Desktop")
data <- read.csv("movie_metadata.csv")
View(data)
View(data)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
ggplot(data, aes(gross, imdb_score, color = facenymber_in_poster)) + geom_point()+brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
library(ggplot2)
ggplot(data, aes(gross, imdb_score, color = facenymber_in_poster)) + geom_point()+brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
library(RColorBrewer)
ggplot(data, aes(gross, imdb_score, color = facenymber_in_poster)) + geom_point()+brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
from ggplot import *
setwd("~/Desktop")
from ggplot2 import *
setwd("~/Desktop")
library(ggplot2)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
install.packages("rattle")
install.packages("rpart.plot")
library(ggplot2)
library(rpart)
library(rattle)
ggplot(data, aes(gross, imdb_score, color = facenymber_in_poster)) + geom_point()+brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
library(ggplot2)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
ggplot(data, aes(gross, imdb_score, color = facenymber_in_poster)) + geom_point()+brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
library(RColorBrewer)
ggplot(data, aes(gross, imdb_score, color = facenymber_in_poster)) + geom_point()+brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
ggplot(data, aes(gross, imdb_score, color = facenymber_in_poster)) + geom_point()+ scale_color_brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
+ scale_color_brewer(type='diverging', palette=1) + xlab("Gross") + ylab("IMDB Score")
ggplot(data, aes(x = 'gross', y = 'imdb_score', color = 'facenymber_in_poster')) + geom_point()
ggplot(data, aes(x = 'gross', y = 'imdb_score', color = 'facenumber_in_poster')) + geom_point()
ggplot( aes(x = 'gross', y = 'imdb_score', color = 'facenumber_in_poster', data = data)) + geom_point()
mydata <- read.csv("movie_metadata.csv")
rm(data)
ggplot( aes(x = 'gross', y = 'imdb_score', color = 'facenumber_in_poster', data = mydata)) + geom_point()
ggplot(mydata, aes(x = 'gross', y = 'imdb_score', color = 'facenumber_in_poster',)) + geom_point()
ggplot(mydata, aes(x = 'gross', y = 'imdb_score', color = 'facenumber_in_poster')) + geom_point()
+ scale_color_brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
+ xlab("Gross") + ylab("IMDB Score")
ggplot(mydata, aes(x = 'gross', y = 'imdb_score')) + geom_point()
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) + geom_point()
+ scale_color_brewer(type='diverging', palette=4) + xlab("Gross") + ylab("IMDB Score")
+ scale_color_brewer(type='diverging', palette=1) + xlab("Gross") + ylab("IMDB Score")
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) +\
geom_point()+\
scale_color_brewer(type='diverging', palette=4) +\
xlab("Gross") + ylab("IMDB Score") + ggtitle("IMDB")
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) +\
geom_point()+\
scale_color_brewer(type='diverging', palette=4) +\
xlab("Gross") + ylab("IMDB Score") + ggtitle("IMDB")
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) +\
geom_point()+\
scale_color_brewer(type='diverging', palette=4) +\
xlab("Gross") + ylab("IMDB Score") + ggtitle("IMDB")
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) +\
geom_point()+\
scale_color_brewer(type='diverging', palette=4) +\
xlab("Gross") + ylab("IMDB Score") + ggtitle("IMDB")
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) +
geom_point()+
scale_color_brewer(type='diverging', palette=4) +
xlab("Gross") + ylab("IMDB Score") + ggtitle("IMDB")
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) +
geom_point(shape=1)
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) +
geom_point()
ggplot(mydata, aes(gross, imdb_score, facenumber_in_poster)) +
geom_point(shape=1)
ggplot(mydata, aes(x = gross, y = imdb_score, color = facenumber_in_poster)) +
geom_point(shape=1)
ggplot(mydata, aes(x = gross, y = imdb_score, color = country)) +
geom_point(shape=1)
ggplot(mydata, aes(x = gross, y = imdb_score, color = country)) +
geom_point()
ggplot(mydata, aes(x = gross, y = imdb_score, color = color)) +
geom_point()
mydata$count <- as.character(facenumber_in_poster)
mydata$count <- as.character(mydata$facenumber_in_poster)
mydata$count[mydata$facenumber_in_poster>1&&<6] <- 5
mydata$count[mydata$facenumber_in_poster>5] <- "up to 5"
ggplot(mydata, aes(x = gross, y = imdb_score, color = count)) +
geom_point()
ggplot(mydata, aes(x = gross, y = imdb_score, color = count)) +
geom_point() +
scale_color_brewer(type='diverging', palette=4) +
xlab("Gross") + ylab("IMDB Score") + ggtitle("IMDB")
ggplot(mydata, aes(x = gross, y = imdb_score, color = count)) +
geom_point(shape = 1)
sp <- ggplot(mydata, aes(x = gross, y = imdb_score, color = count)) +
geom_point(shape = 1)
sp + scale_color_brewer(palette="Dark2")
sp + scale_color_brewer(palette="GrandBudapest")
sp + scale_color_manual(values=wes_palette(n=3, name="GrandBudapest"))
sp + scale_color_brewer(palette="Dark2")
sp <- ggplot(mydata, aes(x = gross, y = imdb_score, color = count)) +
geom_point()
sp + scale_color_brewer(palette="Dark2")
sp + scale_colour_discrete(drop=TRUE,
limits = levels(dataset$fCategory))
sp + scale_colour_discrete(drop=TRUE,
limits = levels(mydata$count))
mydata$count[mydata$facenumber_in_poster>5] <- "over 5"
mydata$count[mydata$facenumber_in_poster==2] <- "2 to 5"
mydata$count[mydata$facenumber_in_poster==3] <- "2 to 5"
mydata$count[mydata$facenumber_in_poster==4] <- "2 to 5"
mydata$count[mydata$facenumber_in_poster==5] <- "2 to 5"
sp <- ggplot(mydata, aes(x = gross, y = imdb_score, color = count)) +
geom_point()
sp + scale_colour_discrete(drop=TRUE,
limits = levels(mydata$count))
sp + scale_color_brewer(palette="Dark2")
mydata$count <- as.character(mydata$facenumber_in_poster)
mydata$count[mydata$facenumber_in_poster>5] <- "over 5"
sp <- ggplot(mydata, aes(x = gross, y = imdb_score, color = count)) +
geom_point()
sp + scale_colour_discrete(drop=TRUE,
limits = levels(mydata$count))
library(ggplot2)
library(rpart)
library(rattle)
library(ggplot2)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
setwd("~/Desktop")
mydata <- read.csv("movie_metadata.csv")
mydata$count <- as.character(mydata$facenumber_in_poster)
mydata$count[mydata$facenumber_in_poster>5] <- "over 5"
sp <- ggplot(mydata, aes(x = gross, y = imdb_score, color = count)) +
geom_point()
sp + scale_colour_discrete(drop=TRUE,
limits = levels(mydata$count))
summary(mydata$facenumber_in_poster)
factor(mydata$facenumber_in_poster)
fraq
frequency(mydata$facenumber_in_poster)
library(plyr)
count(mydata, 'facenumber_inposter')
count(mydata, 'facenumber_in_poster')
hist(mydata$facenumber_in_poster)
hist(mydata$facenumber_in_poster, break = 10)
hist(mydata$facenumber_in_poster, breaks = 10)
facefreq <- count(mydata, 'facenumber_in_poster')
summary(facefreq)
View(facefreq)
plot(density(mydata$facenumber_in_poster))
d <- density(mydata$facenumber_in_poster)
hist(mydata$facenumber_in_poster)
hist(facefreq)
View(mydata)
hist(facefreq$freq)
hist(facefreq$facenumber_in_poster)
hist(mydata$count)
hist(mydata$facenumber_in_poster, breaks = 100)
hist(mydata$facenumber_in_poster, breaks = 50)
hist(mydata$facenumber_in_poster, breaks = 20)
hist(mydata$imdb_score, breaks = 50)
hist(mydata$imdb_score, breaks = 30)
hist(mydata$imdb_score, breaks = 20)
View(mydata)
View(mydata)
View(mydata)
hist(mydata$facenumber_in_poster, breaks = 50)
install.packages("randomForest")
for(level in unique(mydata$language)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$language == level, 1, 0)
}
for(level in unique(mydata$country)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$country == level, 1, 0)
}
for(level in unique(mydata$content_rating)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$content_rating == level, 1, 0)
}
for(level in unique(mydata$title_year)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$title_year == level, 1, 0)
}
for(level in unique(mydata$aspect_ratio)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$aspect_ratio == level, 1, 0)
}
View(mydata)
mydata$id <- NULL
mydata$genres <- NULL
mydata$language <- NULL
mydata$country <- NULL
mydata$content_rating <- NULL
mydata$title_year <- NULL
mydata$aspect_ratio <- NULL
library(randomForest)
set.seed(9487)
mydata$cast_total_facebook_likes <- NULL
mydata$gross <- NULL
mydata$num_critic_for_reviews <- NULL
mydata$num_voted_users <- NULL
mydata$movie_facebook_likes <- NULL
training_size <- floor(0.80 * nrow(mydata))
train_ind <- sample(seq_len(nrow(mydata)), size = training_size)
training <- mydata[train_ind, ]
testing <- mydata[-train_ind, ]
fit <- randomForest(imdb_score ~., data = training)
summary(fitt)
summary(fit)
na.omit(training)
training <- na.omit(training)
testing <- na.omit(testing)
fit <- randomForest(imdb_score ~., data = training)
dummy_New Zealand(mydata)[which(names(mydata) == "dummy_New Zealand")] <- "dummy_New_Zealand"
mydata
View(mydata)
make.names(names(mydata))
mydata <- make.names(names(mydata))
as.data.frame(mydata)
mydata <- read.csv("movie_metadata.csv")
for(level in unique(mydata$language)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$language == level, 1, 0)
}
for(level in unique(mydata$country)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$country == level, 1, 0)
}
for(level in unique(mydata$content_rating)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$content_rating == level, 1, 0)
}
for(level in unique(mydata$title_year)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$title_year == level, 1, 0)
}
for(level in unique(mydata$aspect_ratio)){
mydata[paste("dummy", level, sep = "_")] <- ifelse(mydata$aspect_ratio == level, 1, 0)
}
make.names(names(mydata))
names(mydata) <- make.names(names(mydata))
View(mydata)
mydata$id <- NULL
mydata$genres <- NULL
mydata$language <- NULL
mydata$country <- NULL
mydata$content_rating <- NULL
mydata$title_year <- NULL
mydata$aspect_ratio <- NULL
mydata$cast_total_facebook_likes <- NULL
mydata$gross <- NULL
mydata$num_critic_for_reviews <- NULL
mydata$num_voted_users <- NULL
mydata$movie_facebook_likes <- NULL
training_size <- floor(0.80 * nrow(mydata))
train_ind <- sample(seq_len(nrow(mydata)), size = training_size)
training <- mydata[train_ind, ]
testing <- mydata[-train_ind, ]
training <- na.omit(training)
testing <- na.omit(testing)
fit <- randomForest(imdb_score ~., data = training)
mydata <- read.csv("movie_metadata.csv")
mydataCluster <- kmeans(mydata[, 9:10], 5, nstart = 20)
mydata$cluster <- as.factor(mydataCluster$cluster)
mydata <- na.omit(mydata)
mydataCluster <- kmeans(mydata[, 9:10], 5, nstart = 20)
mydata$cluster <- as.factor(mydataCluster$cluster)
View(mydata)
names(mydata) <- make.names(names(mydata))
mydataCluster <- kmeans(mydata[, 9:10], 5, nstart = 20)
mydata$cluster <- as.factor(mydataCluster$cluster)
mydata[!sapply(mydata, function (x) all(is.na(x) | x == ""))]
mydata <- mydata[!sapply(mydata, function (x) all(is.na(x) | x == ""))]
View(mydata)
mydataCluster <- kmeans(mydata[, 9:10], 5, nstart = 20)
mydata$cluster <- as.factor(mydataCluster$cluster)
mydata <- read.csv("movie_metadata.csv")
set.seed(9487)
mydata[mata==""] <- NA
mydata[mydata==""] <- NA
mydata <- na.omit(mydata)
mydataCluster <- kmeans(mydata[, 9:10], 5, nstart = 20)
mydata$cluster <- as.factor(mydataCluster$cluster)
fit <- randomForest(imdb_score ~., data = training)
names(mydata) <- make.names(names(mydata))
mydata$id <- NULL
mydata$genres <- NULL
mydata$language <- NULL
mydata$country <- NULL
mydata$content_rating <- NULL
mydata$title_year <- NULL
mydata$aspect_ratio <- NULL
mydata$cast_total_facebook_likes <- NULL
mydata$gross <- NULL
mydata$num_critic_for_reviews <- NULL
mydata$num_voted_users <- NULL
mydata$movie_facebook_likes <- NULL
training_size <- floor(0.80 * nrow(mydata))
train_ind <- sample(seq_len(nrow(mydata)), size = training_size)
training <- mydata[train_ind, ]
testing <- mydata[-train_ind, ]
training <- na.omit(training)
testing <- na.omit(testing)
fit <- randomForest(imdb_score ~., data = training)
str(mydata)
mydata$actor_3_name <- NULL
mydata$actor_2_name <- NULL
mydata$actor_1_name <- NULL
mydata$movie_title <- NULL
mydata$plot_keywords <- NULL
mydata$movie_imdb_link <- NULL
training_size <- floor(0.80 * nrow(mydata))
train_ind <- sample(seq_len(nrow(mydata)), size = training_size)
training <- mydata[train_ind, ]
testing <- mydata[-train_ind, ]
training <- na.omit(training)
testing <- na.omit(testing)
fit <- randomForest(imdb_score ~., data = training)
mtr(training)
str(training)
mydata$director_name <- NULL
training_size <- floor(0.80 * nrow(mydata))
train_ind <- sample(seq_len(nrow(mydata)), size = training_size)
training <- mydata[train_ind, ]
testing <- mydata[-train_ind, ]
training <- na.omit(training)
testing <- na.omit(testing)
fit <- randomForest(imdb_score ~., data = training)
print(fit)
Prediction <- predict(fit, testing)
Prediction
confusionMatrix(Prediction, testing$cluster)
table(Prediction, testing$cluster)
summary(Prediction)
table(Prediction)
fit$forest
library(reprtree)
install.packages("reprtree")
library(reprtree)
plot(fit)
plot(fit, log = "y")
varImpPlot(fit,type=2)
postResample(Prediction, test$y)
p <- ggplot(aes(x=actual, y=pred),
data=data.frame(actual=testing$imdb_score, pred=predict(fit, testing[,cols])))
p + geom_point() +
geom_abline(color="red")
table(Prediction, testing$imdb_score)
install.packages("ConfusionMatrix")
getTree(fit)
Prediction
fit$predicted
fit
table <- table(Prediction, testing$imdb_score)
table
fit
ddata <- read.csv("movie_metadata.csv")
View(ddata)
